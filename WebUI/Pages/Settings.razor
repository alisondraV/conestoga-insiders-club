@page "/settings"
@using ConestogaInsidersClub.Data.Models;
@using ConestogaInsidersClub.Data.DataAccess;
@using ConestogaInsidersClub.Pages.ViewModels;

@inject IPreferenceService preferenceService;
@inject IGameService gameService;
@inject IGameGenreService gameGenreService;
@inject IUserService userService;

<h1>Settings</h1>
<br />

@if (user == null)
{
    <h3>Loading...</h3>
}
else
{
    if (editPreferenceMode != true)
    {
        <h4>Preferences</h4>
        <table>
            <tr>
                <td><b>Your favourite genre:</b></td>
                <td><span id="Genre">@(preference.GenreName ?? "*Not set yet*")</span></td>
            </tr>
            <tr>
                <td><b>Your favourite platform:</b></td>
                <td><span id="Platform">@(preference.Platform ?? "*Not set yet*")</span></td>
            </tr>
            <tr>
                <td><b>Your favourite game:</b></td>
                <td><span id="Favourite_Game">@(preference.FavouriteGame?.Name ?? "*Not set yet*")</span></td>
            </tr>
            <tr>
                <td><b>Recieve promotional email:</b></td>
                <td><span id="Recieve_Promotions">@(preference.ReceivePromotionalEmails ?? false ? "Yes" : "No")</span></td>
            </tr>
        </table>
        <button class="btn-primary rounded" @onclick="@FlipEditPreferenceMode">Edit</button>
    }
    else
    {
        <EditForm Model="@preferenceViewModel" OnValidSubmit="@HandlePreferenceSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <h3>Edit Preferences</h3>
            <table>
                <tr>
                    <td>Your favourite genre:</td>
                    <td>
                        <InputSelect id="Genre_Edit" @bind-Value="preferenceViewModel.GenreName">
                            <option value="">None</option>
                            @foreach (var genre in gameGenres)
                            {
                                <option value="@genre.Name">@genre.Name</option>
                            }
                        </InputSelect>
                    </td>
                </tr>
                <tr>
                    <td>Your favourite platform:</td>
                    <td><InputText id="Platform_Edit" @bind-Value="preferenceViewModel.Platform" /></td>
                </tr>
                <tr>
                    <td>Your favourite game:</td>
                    <td>
                        <InputSelect id="Favourite_Game_Edit" @bind-Value="preferenceViewModel.FavouriteGameId">
                            <option value="">None</option>
                            @foreach (var game in games)
                            {
                                <option value="@game.GameId">@game.Name</option>
                            }
                        </InputSelect>
                    </td>
                </tr>
                <tr>
                    <td>Do you wish to recieve promotions?</td>
                    <td><InputCheckbox id="Recieve_Promotions_Edit" @bind-Value="preferenceViewModel.ReceivePromotionalEmails" /></td>
                </tr>
            </table>
            <button class="btn-info  rounded" type="submit">Save</button>
        </EditForm>
    }

    <br />
    <br />

    <AddressForm addressType="Mailing" address="@user.MailingAddress" onSave="@HandleMailingAddressSubmit" />

    <br />
    <br />

    <AddressForm addressType="Shipping" address="@user.ShippingAddress" onSave="@HandleShippingAddressSubmit" />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private AuthenticationState authenticationState;
    private ApplicationUser user;
    private Preference preference;
    private List<Game> games;
    private List<GameGenre> gameGenres;
    private UserVM userViewModel;
    private PreferenceVM preferenceViewModel = new PreferenceVM();
    private bool editPreferenceMode = false;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationState;
        user = await userService.GetUser(authenticationState.User.Identity.Name);
        preference = await preferenceService.GetPreference(user.UserName);
        games = await gameService.GetGames();
        gameGenres = await gameGenreService.GetGameGenres();

        userViewModel = new UserVM(user);
        preferenceViewModel = PreferenceVM.ToViewModel(preference);
    }

    private async void HandlePreferenceSubmit()
    {
        Preference updatedPreference = PreferenceVM.ToModel(preference, preferenceViewModel);
        await preferenceService.UpdatePreference(updatedPreference);
        FlipEditPreferenceMode();
        StateHasChanged();
    }

    private async void HandleMailingAddressSubmit(Address newAddress)
    {
        userViewModel.MailingAddress = newAddress;
        ApplicationUser updatedUser = userViewModel.ToModel(user);
        await userService.UpdateUser(updatedUser);
    }

    private async void HandleShippingAddressSubmit(Address newAddress)
    {
        userViewModel.ShippingAddress = newAddress;
        ApplicationUser updatedUser = userViewModel.ToModel(user);
        await userService.UpdateUser(updatedUser);
    }

    private void FlipEditPreferenceMode()
    {
        editPreferenceMode = !editPreferenceMode;
    }
}
