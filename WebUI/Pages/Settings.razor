@page "/settings"
@using ConestogaInsidersClub.Data.Models;
@using ConestogaInsidersClub.Data.DataAccess;
@using ConestogaInsidersClub.Pages.ViewModels;

@inject IPreferenceService preferences;

<h1>Settings</h1>
@if (authenticationState == null)
{
    <h3>Loading...</h3>
}
else if (editMode != true)
{
    <h3>Preferences</h3>
    <table>
        <tr>
            <td width="150px"><b>Your favourite genre:</b></td>
            <td><span id="Genre">@(preference.Genre.Name ?? "*Not set yet*")</span></td>
        </tr>
        <tr>
            <td width="150px"><b>Your favourite platform:</b></td>
            <td><span id="Platform">@(preference.Platform ?? "*Not set yet*")</span></td>
        </tr>
        <tr>
            <td width="350px"><b>Recieve promotional emails</b></td>
            <td><input disabled type="checkbox" checked="@(preference.ReceivePromotionalEmails)" id="Recieve_Promotions" /></td>
        </tr>
    </table>
    <br />
    <button @onclick="@FlipEditMode">Edit</button>
}
else
{
    <br />
    <EditForm Model="@preferenceViewModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h3>Edit Preferences</h3>
        <br />
        <p>
            <label>
                Your favourite genre:
                <InputText id="Genre_Edit" @bind-Value="preferenceViewModel.Genre" />
            </label>
        </p>
        <p>
            <label>
                Your favourite platform:
                <InputText id="Platform_Edit" @bind-Value="preferenceViewModel.Platform" />
            </label>
        </p>
        <p>
            <label>
                Do you wish to recieve promotions?
                <InputCheckbox id="Recieve_Promotions_Edit" @bind-Value="preferenceViewModel.ReceivePromotionalEmails" />
            </label>
        </p>

        <button type="submit">Save</button>
    </EditForm>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private AuthenticationState authenticationState;
    private Preference preference;
    private PreferenceVM preferenceViewModel = new PreferenceVM();
    private bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationState;
        preference = await preferences.GetPreference(authenticationState.User.Identity.Name);

        preferenceViewModel = PreferenceVM.ToViewModel(preference);
    }

    private async void HandleValidSubmit()
    {
        Preference updatedPreference = PreferenceVM.ToModel(preference, preferenceViewModel);
        updatedPreference.UserId = preference.UserId;
        await preferences.UpdatePreference(updatedPreference);
        FlipEditMode();
    }

    private void FlipEditMode()
    {
        editMode = !editMode;
    }
}
