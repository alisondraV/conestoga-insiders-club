@page "/settings"

@using ConestogaInsidersClub.Data.DataAccess
@using ConestogaInsidersClub.Data.Models
@using ConestogaInsidersClub.Pages.ViewModels

@inject IGameService gameService;
@inject IPreferenceService preferenceService;
@inject IGameGenreService gameGenreService;
@inject IUserService userService;
@inject NavigationManager NavigationManager;

<h1>Settings</h1>
<br />

@if (preference == null || gameGenres == null || games == null)
{
    <h3>Loading...</h3>
}
else if (editPreferenceMode != true)
{
    <h4>Preferences</h4>
    <table>
        <tr>
            <td><b>Your favourite genre:</b></td>
            <td><span id="Genre">@(preference.GenreName ?? "*Not set yet*")</span></td>
        </tr>
        <tr>
            <td><b>Your favourite platform:</b></td>
            <td><span id="Platform">@(preference.Platform ?? "*Not set yet*")</span></td>
        </tr>
        <tr>
            <td><b>Your favourite game:</b></td>
            <td><span id="Favourite_Game">@(preference.FavouriteGame?.Name ?? "*Not set yet*")</span></td>
        </tr>
        <tr>
            <td><b>Recieve promotional email:</b></td>
            <td><span id="Recieve_Promotions">@(preference.ReceivePromotionalEmails ?? false ? "Yes" : "No")</span></td>
        </tr>
    </table>
    <button class="btn-primary rounded mb-5 mt-2" @onclick="@FlipEditPreferenceMode">Edit</button>
}
else
{
    <EditForm Model="@preferenceViewModel" OnValidSubmit="@HandlePreferenceSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h3>Edit Preferences</h3>
        <table>
            <tr>
                <td>Your favourite genre:</td>
                <td>
                    <InputSelect id="Genre_Edit" @bind-Value="preferenceViewModel.GenreName">
                        <option value="">None</option>
                        @foreach (var genre in gameGenres)
                        {
                            <option value="@genre.Name">@genre.Name</option>
                        }
                    </InputSelect>
                </td>
            </tr>
            <tr>
                <td>Your favourite platform:</td>
                <td><InputText id="Platform_Edit" @bind-Value="preferenceViewModel.Platform" /></td>
            </tr>
            <tr>
                <td>Your favourite game:</td>
                <td>
                    <InputSelect id="Favourite_Game_Edit" @bind-Value="preferenceViewModel.FavouriteGameId">
                        <option value="">None</option>
                        @foreach (var game in games)
                            {
                            <option value="@game.GameId">@game.Name</option>
                            }
                    </InputSelect>
                </td>
            </tr>
            <tr>
                <td>Do you wish to recieve promotions?</td>
                <td><InputCheckbox id="Recieve_Promotions_Edit" @bind-Value="preferenceViewModel.ReceivePromotionalEmails" /></td>
            </tr>
        </table>
        <button class="btn-info rounded mb-5 mt-2" type="submit">Save</button>
    </EditForm>
}

<AddressForm addressType="Mailing" address="@user.MailingAddress" onSave="@HandleMailingAddressSubmit" />
<AddressForm addressType="Shipping" address="@user.ShippingAddress" onSave="@HandleShippingAddressSubmit" />
<label style="display: block;">
    Is your shipping address same as mailing?
    <input type="checkbox" id="Same_Mailing_And_Shipping" @onchange="async (e) => { await HandleShippingSameAsMailing(e.Value); }" />
</label>

<br />
<button class="btn-link rounded mb-lg-5 w-25 credit" @onclick="GoToCreditCardPage">Update credit card info</button>

@code {
        [CascadingParameter(Name = "user")]
        protected ApplicationUser user { get; set; }

        [CascadingParameter(Name = "userViewModel")]
        public UserVM userViewModel { get; set; }

        public Preference preference;
        public List<Game> games;
        public List<GameGenre> gameGenres;
        public PreferenceVM preferenceViewModel;
        public bool editPreferenceMode = false;

        protected override async Task OnInitializedAsync()
        {
            preference = await preferenceService.GetPreference(user.UserName);
            games = await gameService.GetGames();
            gameGenres = await gameGenreService.GetGameGenres();

            preferenceViewModel = new PreferenceVM(preference);
        }

        public async void HandlePreferenceSubmit()
        {
            Preference updatedPreference = preferenceViewModel.ToModel(preference);
            await preferenceService.UpdatePreference(updatedPreference);
            FlipEditPreferenceMode();
            StateHasChanged();
        }

        public async void HandleMailingAddressSubmit(Address newAddress)
        {
            userViewModel.MailingAddress = newAddress;
            ApplicationUser updatedUser = userViewModel.ToModel(user);
            await userService.UpdateUser(updatedUser);
        }

        public async void HandleShippingAddressSubmit(Address newAddress)
        {
            userViewModel.ShippingAddress = newAddress;
            ApplicationUser updatedUser = userViewModel.ToModel(user);
            await userService.UpdateUser(updatedUser);
        }

        public async Task HandleShippingSameAsMailing(object isChecked)
        {
            userViewModel.ShippingAddress = (bool)isChecked ? userViewModel.MailingAddress : new Address();
            ApplicationUser updatedUser = userViewModel.ToModel(user);
            await userService.UpdateUser(updatedUser);
        }

        public void GoToCreditCardPage()
        {
            NavigationManager.NavigateTo("credit-card");
        }

        public void FlipEditPreferenceMode()
        {
            editPreferenceMode = !editPreferenceMode;
        }
}