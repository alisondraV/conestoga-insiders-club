@page "/friends"
@using ConestogaInsidersClub.Data.Models;
@using ConestogaInsidersClub.Data.DataAccess;

@inject IUserService userService;
@inject NavigationManager NavigationManager;

<h1>Friends</h1>

@if (currentUser == null)
{
    <h3>Loading...</h3>
}
else
{
    <div>
        <button class="tab alert @(friendsTab ? "alert-primary" : "")" @onclick="() => SwitchToFriendsTab(true)">Your Friends</button>
        <button class="tab alert @(friendsTab ? "" : "alert-primary")" @onclick="() => SwitchToFriendsTab(false)">Add a Friend</button>
    </div>

    @if (friendsTab)
    {
        if (friends.Count == 0)
        {
            <h4>You have no friends yet. Go to the "Add a Friend" tab to find new friends!</h4>
        }
        else
        {
            <div class="d-inline-flex flex-wrap">
                @foreach (var friend in friends)
                {
                    <UserCard InvokeParentMethod="@(() => RemoveFriend(friend.Id))"
                              User="friend"
                              ButtonText="Remove Friend" />
                }
            </div>
        }
    }
    else
    {
        <input id="Search" @onchange="@LookForUser" placeholder="Enter the username you want to search for..." />

        if (possibleFriends.Count == 0)
        {
            <h4>There are no available friends at the moment :(</h4>
        }
        else
        {
            <div class="d-inline-flex flex-wrap">
                @foreach (var possibleFriend in possibleFriends)
                {
                    <UserCard InvokeParentMethod="@(() => AddFriend(possibleFriend.Id))"
                              User="possibleFriend"
                              ButtonText="Add friend" />
                }
            </div>
        }
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private AuthenticationState authenticationState;
    private ApplicationUser currentUser;
    private List<ApplicationUser> friends;
    private List<ApplicationUser> possibleFriends = new List<ApplicationUser> { };
    private bool friendsTab = true;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationState;
        currentUser = await userService.GetUser(authenticationState.User.Identity.Name);
        friends = await userService.GetFriends(currentUser);

        possibleFriends = await GetPossibleFriends();
    }

    private async Task<List<ApplicationUser>> GetPossibleFriends()
    {
        var pf = new List<ApplicationUser> { };
        var users = await userService.GetUsers();
        var friendsIds = friends.Select(u => u.Id).ToList();

        foreach (var user in users)
        {
            if (user.Id != currentUser.Id && !friendsIds.Contains(user.Id))
            {
                pf.Add(user);
            }
        }

        return pf;
    }

    private void SwitchToFriendsTab(bool isFriendsTab)
    {
        friendsTab = isFriendsTab;
    }

    private async void AddFriend(string userId)
    {
        await userService.CreateFriendship(currentUser.Id, userId);
        NavigationManager.NavigateTo("friends", true);
    }

    private async void RemoveFriend(string userId)
    {
        await userService.DeleteFriendship(currentUser.Id, userId);
        NavigationManager.NavigateTo("friends", true);
    }

    private async void LookForUser(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string searchQuery = (string)args.Value;

        if (searchQuery == "")
        {
            possibleFriends = await GetPossibleFriends();
        }
        else
        {
            possibleFriends = possibleFriends.FindAll(pf => pf.UserName.ToLower().Contains(searchQuery.ToLower()));
        }
        StateHasChanged();
    }
}
