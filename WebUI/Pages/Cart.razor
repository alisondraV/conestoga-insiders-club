@page "/cart"
@layout AuthorizedPagesLayout
@using ConestogaInsidersClub.Data.Models;
@using ConestogaInsidersClub.Data.DataAccess;
@using ConestogaInsidersClub.Pages.ViewModels;

@inject IGameService gameService;
@inject ICartService cartService;

<h1 class="mb-4">Cart</h1>

@if (cartItems == null)
{
    <h3>Loading...</h3>
}
else if (cartItems.Count() == 0)
{
    <h4>There are no games in your cart yet. Go to the <a href="/">home page</a> to discover the games we have to offer!</h4>
}
else
{
    @if (!checkOutState)
    {
        @foreach (var cartItem in cartItems)
        {
            <GameCard Game="cartItem.Game"
                      ButtonText="Remove from Cart"
                      ButtonClass="btn-danger"
                      OnClick="() => RemoveFromCart(cartItem)" />
            <br />
        }
        <button class="rounded btn-primary mt-5 ml-3" @onclick="ToggleCheckOut">Proceed to check out</button>
    }
    else
    {
        @foreach (var cartItem in cartItems)
        {
            <div class="col-4">
                <div class="d-flex justify-content-between">
                    <span>@cartItem.Game.Name</span>
                    <span>@cartItem.Game.Price</span>
                </div>
                <hr />
            </div>
        }
        <div class="col-4 mt-4">
            <div class="d-flex justify-content-between">
                <span><b>Total:</b></span>
                <span>@cartTotal</span>
            </div>
        </div>
        <button class="rounded btn-primary mt-5 mr-2" @onclick="ToggleCheckOut">Confirm order</button>
        <button class="rounded btn-secondary mt-5" @onclick="ToggleCheckOut">Back to the Cart</button>
    }
}

@code {
    [CascadingParameter(Name = "user")]
    protected ApplicationUser user { get; set; }
    private List<CartItem> cartItems;
    private bool checkOutState = false;
    private double cartTotal = 0.0;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await cartService.GetCartItems(user.Id);
        cartItems.ForEach(ci => cartTotal += ci.Game.Price);
    }

    private async void RemoveFromCart(CartItem cartItem)
    {
        await cartService.RemoveCartItem(cartItem);

        cartItems = await cartService.GetCartItems(user.Id);
        StateHasChanged();
    }

    private void ToggleCheckOut()
    {
        checkOutState = !checkOutState;
    }
}
