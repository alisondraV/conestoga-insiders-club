@page "/game/{GameId:int}"
@layout AuthorizedPagesLayout
@using ConestogaInsidersClub.Data.Models;
@using ConestogaInsidersClub.Data.DataAccess;
@using ConestogaInsidersClub.Pages.ViewModels;

@inject IGameService gameService;
@inject ICartService cartService;
@inject IWishedItemService wishedItemService;
@inject IReviewService reviewService;
@inject NavigationManager NavigationManager;

@if (game == null)
{
    <h3>Loading...</h3>
}
else
{
    <h3>Game Details</h3>
    <br />
    <table>
        <tr>
            <td>Name: </td>
            <td class="align-content-end"><span id="Game_Name">@game.Name</span></td>
        </tr>
        <tr>
            <td>Description: </td>
            <td><span id="Game_Name">@game.Description</span></td>
        </tr>
        <tr>
            <td>Price: </td>
            <td><span id="Game_Name">@game.Price.ToString("C")</span></td>
        </tr>
        <tr>
            <td>Genre: </td>
            <td><span id="Game_Name">@game.GenreName</span></td>
        </tr>
        <tr>
            <td>★ Rating: </td>
            @if (averageRating == 0)
            {
                <td><span id="Average_Rating">No Rating Recorded</span></td>
            }
            else
            {
                <td><span id="Average_Rating">@averageRating/5 Stars</span></td>
            }
        </tr>
    </table>
    <br />
    @if (!IsGameInCart(game.GameId) && !gameService.IsOwnedBy(game, user.Id))
    {
        <button class="btn btn-primary mr-1" @onclick="@(() => AddToCart(game.GameId))">Add To Cart</button>
        <button class="btn btn-secondary" @onclick="@(() => UpdateWishlist(game.GameId))">
            @(isGameInWishlist ? "Remove from Wishlist" : "Add to Wishlist")
        </button>
    }
    else if (gameService.IsOwnedBy(game, user.Id))
    {
        <a class="btn btn-success rounded mr-1" href="@downloadLink" target="_blank">
            <span class="oi oi-data-transfer-download mr-1" aria-hidden="true" /> Download
        </a>
        @if (!isGameReviewedByUser)
        {
            <button class="btn btn-primary" @onclick="@ToggleReviewVisibility">Leave Review</button>
        }
    }
    @if (showReviewForm)
    {
        <br />
        <div class="bg-white rounded shadow-sm p-4 mb-5 rating-review-select-page">
            <h5 class="mb-4">Leave Review</h5>
            <form>
                <div class="form-group pb-4">
                    <span class="rating">
                        @for (int i = 0; i < 5; i++)
                        {
                            <input type="radio" name="starRating" id=@($"rating{i}") value="{i}" @onchange="RatingSelectionChanged" checked="@(rating == i)">
                            <label for=@($"rating{i}")>@i</label>
                        }
                    </span>
                </div>
                <div class="form-group pt-4">
                    <h6 class="mb-4">Comments:</h6>
                    <textarea class="form-control" id="comments" @bind="description"></textarea>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary btn-sm" type="submit" @onclick="(() => SubmitReview())">Submit Review</button>
                </div>
            </form>
        </div>
        <br />
    }
    @if (approvedReviews.Count == 0)
    {
        <h3 class="my-3">No reviews available... ;-;</h3>
    }
    else
    {
        @foreach (var review in approvedReviews)
        {
            <div class="border border-secondary rounded mr-3 my-3 p-3 bg-light d-flex-column">
                <div class="my-4 pt-4">
                    <h6 class=""><b>@review.User.FirstName @review.User.LastName</b></h6>
                </div>
                <span class="rating">
                    @for (int i = 0; i < 5; i++)
                    {
                        @if (review.Rating == i)
                        {
                            <input type="radio" name="starRating" id=@($"rating{i}") checked disabled>
                        }
                        else
                        {
                            <input type="radio" name="starRating" id=@($"rating{i}") disabled>
                        }
                        <label for=@($"rating{i}")>@i</label>
                    }
                </span>
                @if (review.Description != "")
                {
                    <div class="my-4 pt-4">
                        <h6 class="">Comments:</h6>
                        <textarea class="form-control" id="comments" disabled>@review.Description</textarea>
                    </div>
                }

            </div>
         }
    }
}

@code {
    [Parameter]
    public int GameId { get; set; }
    [CascadingParameter(Name = "user")]
    protected ApplicationUser user { get; set; }
    private Game game;
    private Review review = new Review();
    private List<Review> approvedReviews;
    private string description = "";
    private byte rating;
    private double averageRating;
    private string downloadLink;
    private bool showReviewForm = false;
    private bool isGameInWishlist;
    private bool isGameReviewedByUser;

    protected override async Task OnInitializedAsync()
    {
        game = await gameService.GetGame(GameId);
        averageRating = await reviewService.GetAverageRating(GameId);
        approvedReviews = await reviewService.GetApprovedGameReviews(GameId);
        downloadLink = $"/download?gameId={GameId}";
        await CheckIfGameInWishlist();
        await CheckIfUserReviewedGame();
    }

    private bool IsGameInCart(int gameId)
    {
        return game.CartItems.Any(ci => ci.UserId == user.Id);
    }

    private async void AddToCart(int gameId)
    {
        CartItem cartItem = new CartItem { UserId = user.Id, GameId = gameId };
        await cartService.AddCartItem(cartItem);

        game = await gameService.GetGame(GameId);
        StateHasChanged();
    }

    private async void UpdateWishlist(int gameId)
    {
        await wishedItemService.AddOrRemoveFromWishlist(game, user.Id);
        await CheckIfGameInWishlist();
        StateHasChanged();
    }

    private async void SubmitReview()
    {
        review.GameId = GameId;
        review.UserId = user.Id;
        review.Rating = rating;
        review.Description = description;
        review.Approved = description == "" ? true : null;
        await reviewService.AddReview(review);
    }

    private async Task CheckIfGameInWishlist()
    {
        var userWishedItems = await wishedItemService.GetWishedGamesForUser(user.Id);
        isGameInWishlist = userWishedItems.Contains(game);
    }

    private async Task CheckIfUserReviewedGame()
    {
        var userReviews = await reviewService.GetReviewsByUser(user.Id);
        foreach (var review in userReviews)
        {
            if (review.GameId == this.GameId)
            {
                isGameReviewedByUser = true;
                break;
            }
            else
            {
                isGameReviewedByUser = true;
            }
        }
    }

    private void RatingSelectionChanged(ChangeEventArgs args)
    {
        rating = byte.Parse(args.Value.ToString());
    }


    private void ToggleReviewVisibility()
    {
        showReviewForm = !showReviewForm;
    }
}
